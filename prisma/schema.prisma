// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol", "postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model Document {
    id        String                       @id @default(cuid())
    content   String
    vector    Unsupported("vector(1536)")?
    createdAt DateTime                     @default(now())
    updatedAt DateTime                     @updatedAt
}

model Message {
    id             String        @id @default(cuid())
    content        String
    role           String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    Conversation   Conversation? @relation(fields: [conversationId], references: [id])
    conversationId String?
}

model Conversation {
    id        String    @id @default(cuid())
    name      String
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    messages  Message[]
}

// Necessary for Next auth
model Account {
    id                   String    @id @default(cuid())
    userId               String
    type                 String
    provider             String
    providerAccountId    String
    refresh_token        String? // @db.Text
    access_token         String? // @db.Text
    access_token_expires DateTime?
    expires_at           Int?
    token_type           String?
    scope                String?
    id_token             String? // @db.Text
    session_state        String?
    user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Conversations Conversation[]
    role          String         @default("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
